/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Apply the JaCoCo plugin to add support for generating code coverage reports
    id 'jacoco'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    // JCommon and JFreeChart for the Display_02 Plotter
    implementation 'org.jfree:jcommon:1.0.23'
    implementation 'org.jfree:jfreechart:1.0.19'

}

application {
    // Define the main class for the application.
    mainClassName = 'edu.oakland.production.admin.Main'
}

run{
    standardInput = System.in
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging.showStandardStreams = true    
    testLogging {
       events "PASSED", "FAILED", "SKIPPED"
    }
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['edu/oakland/production/admin/Main.class'])
        }))
    }
}

task unitTest(type: Test) {
    // Use junit platform for unit tests
    useJUnitPlatform {
        excludeTags 'IntegrationTests'
    }
    testLogging.showStandardStreams = true    
    testLogging {
       events "PASSED", "FAILED", "SKIPPED"
    }
}

task jacocoUnitTestReport(type: JacocoReport) {
    // tests are required to run before generating the report
    dependsOn unitTest
    executionData(file("${project.buildDir}/jacoco/unitTest.exec"))
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['edu/oakland/production/admin/Main.class'])
        }))
    }
}

task integrationTest(type: Test) {
    // Use junit platform for unit tests
    useJUnitPlatform {
        includeTags 'IntegrationTests'
    }
    testLogging.showStandardStreams = true    
    testLogging {
       events "PASSED", "FAILED", "SKIPPED"
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    // tests are required to run before generating the report
    dependsOn integrationTest
    executionData(file("${project.buildDir}/jacoco/integrationTest.exec"))
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['edu/oakland/production/admin/Main.class'])
        }))
    }
}
